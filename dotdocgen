#!/usr/bin/env lua
--[[ @docs {
@header { .docgen }
  .docgen is a simple, powerful, and easily extensible documentation generator written completely in Lua.

@header3 { Usage }
  @monospace { dotdocgen [OPTIONS] FILE [...] DESTINATION }

@header3 { Command-Line Options }
  @bold { --format } FORMAT
    Tells .docgen to use the specified format.

  @bold { --version }
    Print the version of .docgen, and exit.

  @bold { --comment } PREFIX
    The prefix to all comment lines.

@header3 { Directive Syntax }
  @monospace { &at;DIRECTIVE &lcb; DATA &rcb; }
} --]]

local VERSION = ".docgen 0.1.0"

if not arg then
  error(".docgen requires the presence of 'arg' but it was not found", 0)
end

-- argument parsing
local args, opts = {}, {}
local next_is_optarg = false
for i=1, #arg, 1 do
  if not next_is_optarg then
    if arg[i] == "--format" then
      opts.format = arg[i + 1]
      next_is_optarg = true
    elseif arg[i] == "--comment" then
      opts.comment = arg[i + 1]
      next_is_optarg = true
    elseif arg[i] == "--version" then
      opts.version = true
    else
      args[#args+1] = arg[i]
    end
  else
    next_is_optarg = false
  end
end

local function perr(f, ...)
  io.stderr:write(string.format(".docgen: %s\n", string.format(f, ...)))
  os.exit(1)
end

if opts.version then
  print(VERSION)
  os.exit(0)
end

if #args < 2 then
  perr("too few arguments")
end

local out = assert(io.open(args[#args], "w"))

local directive_pattern = "@([^ ]+) (%b{})"
local replacements = require("output.replacements")

local process_directive
local output = require("output."..(opts.format or "html"))
process_directive = function(name, arguments)
  local direc = require("directives."..name)
  return direc(arguments:sub(3,-3), output, opts.comment)
    :gsub(directive_pattern, process_directive)
end

local write = ""
for i=1, #args - 1, 1 do
  local handle = assert(io.open(args[i], "r"))
  local data = handle:read("a")
  for outer, data in data:gmatch(directive_pattern) do
    write = write .. process_directive(outer, data)
  end
end

write = write:gsub("&([^;]+);", replacements)

if output.postprocess then
  write = output.postprocess(write)
end

out:write(write)
out:close()
